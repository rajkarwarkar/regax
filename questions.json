{
    "questions": [
        {
            "question": "Create a regex to find all hashtags in a given text (e.g., #example).",
            "testCases": ["#love", "no hashtag", "#2020", "#LifeIsGood"],
            "expected": [true, false, true, true],
            "hint": "Look for a pattern that starts with '#' followed by a sequence of word characters (letters, digits, or underscores)."
        },
        {
            "question": "Write a regex to match strings that are only alphanumeric (letters and digits).",
            "testCases": ["abc123", "123", "abc", "abc 123", "abc@123"],
            "expected": [true, true, true, false, false],
            "hint": "The pattern should allow letters and digits, but exclude spaces or special characters. Use a quantifier to match the whole string."
        },
        {
            "question": "Create a regex to find all words that end with 'ing' in a given text.",
            "testCases": ["running", "walking", "jumped", "sing"],
            "expected": [true, true, false, true],
            "hint": "Your pattern should end with 'ing' and may need to account for word boundaries to ensure it matches entire words."
        },
        {
            "question": "Write a regex to validate US phone numbers (e.g., (123) 456-7890 or 123-456-7890).",
            "testCases": ["(123) 456-7890", "123-456-7890", "1234567890", "123.456.7890"],
            "expected": [true, true, false, false],
            "hint": "Consider patterns that match both formats, including parentheses and hyphens. You might need to use optional groups."
        },
        {
            "question": "Create a regex to find all words in a text that start and end with the same letter.",
            "testCases": ["level", "deified", "radar", "hello", "world"],
            "expected": [true, true, true, false, false],
            "hint": "The word should start and end with the same letter. Use capturing groups and backreferences to achieve this."
        },
        {
            "question": "Write a regex to validate strings that are valid passport numbers (e.g., A1234567).",
            "testCases": ["A1234567", "B9876543", "1234567A", "A12345", "A12345678"],
            "expected": [true, true, false, false, false],
            "hint": "The pattern should start with a letter followed by exactly seven digits. Ensure it doesn't have any extra characters."
        },
        {
            "question": "Create a regex to find all quoted strings in a text (e.g., \"example\" or 'example').",
            "testCases": ["\"hello\"", "'world'", "\"test'", "'test\"", "no quotes"],
            "expected": [true, true, false, false, false],
            "hint": "Look for patterns enclosed by either double quotes or single quotes. Make sure to handle both types."
        },
        {
            "question": "Write a regex to match strings that are valid domain names.",
            "testCases": ["example.com", "sub.example.com", "example", "example.", ".com"],
            "expected": [true, true, false, false, false],
            "hint": "Domain names typically contain letters, numbers, and dots. They should end with a valid top-level domain but not start or end with a dot."
        },
        {
            "question": "Create a regex to find all mentions in a text (e.g., @username).",
            "testCases": ["@user1", "no mention", "@user_name", "@User123"],
            "expected": [true, false, true, true],
            "hint": "Mentions start with '@' and are followed by alphanumeric characters or underscores. Ensure it matches whole mentions."
        },
        {
            "question": "Match all strings that contain only digits",
            "testCases": ["12345", "abc123", "67890", "42"],
            "expected": [true, false, true, true],
            "hint": "The pattern should match strings composed solely of digits with no other characters."
        },
        {
            "question": "Match all strings that start with a capital letter",
            "testCases": ["Hello", "world", "Python", "java"],
            "expected": [true, false, true, false],
            "hint": "The pattern should begin with an uppercase letter, followed by any combination of characters."
        }
    ]
}

